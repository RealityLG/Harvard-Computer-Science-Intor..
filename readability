#include <cs50.h>
#include <stdio.h>
#include <string.h>
#include <ctype.h>
#include <math.h>

int count_letter(string letter1);
int words(string words);
int sentences(string sentences);

int main(void)
{
    //getting sentence
    string sent_all = get_string("Sentence: ");

    float L = 0;
    float S = 0;

    //calculating letters, words, sentences
    float lett_ = count_letter(sent_all);
    float word_ = words(sent_all);
    float sent_ = sentences(sent_all);

    //calculating L
    if (word_ < 101)
    {
        float f = 100 / word_;
        L = lett_ * f;
    }
    else if (word_ > 100)
    {
        L = lett_ / word_ * 100;
    }

    //calculating S
    if (word_ < 101)
    {
        float f = 100 / word_;
        S = sent_ * f;
    }
    else if (word_ > 100)
    {
        S = sent_ / word_ * 100;
    }

    //calculating the index
    float index = 0.0588 * L - 0.296 * S - 15.8;

    //printing the Grade
    if (index < 1)
    {
        printf("Before Grade 1\n");
    }
    else if (index > 15)
    {
        printf("Grade 16+\n");
    }
    else
    {

        printf("Grade %i\n", (int) round(index));
    }
}



//calculating letters
int count_letter(string letter1)
{
    int y = 0;
    int i = 0;
    int x = strlen(letter1);
    int let[x];

    //is looking, if it is a letter and sum them up
    while (i < x)
    {
        int o = letter1[i];
        if ((o > 64 && o < 91) || (o > 96 && o < 132))
        {
            y++;
        }
        i++;
    }
    return y;
}

//calculating words
int words(string words)
{
    int x = strlen(words);
    int u = 0;
    int p = 1;

    while (u < x)
    {
        //looking up for spaces in senctences
        if (words[u] == 32)
        {
            p++;
        }
        u++;
    }
    return p;
}

//calculating sentences
int sentences(string sentences)
{
    int x = strlen(sentences);
    int u = 0;
    int p = 0;

    //looking up for sentence-endings
    while (u < x)
    {
        if (sentences[u] == 33 || 46 == sentences[u] || 63 == sentences[u])
        {
            p++;
        }
        u++;
    }
    return p;
}
